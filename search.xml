<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>git文件</title>
      <link href="/posts/6c850a70/"/>
      <url>/posts/6c850a70/</url>
      
        <content type="html"><![CDATA[<h1 id="Git文件状态"><a href="#Git文件状态" class="headerlink" title="Git文件状态"></a>Git文件状态</h1><ul><li><strong>untrack：</strong> 未跟踪状态，指新建的文件</li><li><strong>modified：</strong> 修改的文件，但是没有保存到git仓库中</li><li><strong>staged：</strong>  表示对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中。</li><li><strong>committed：</strong> 表示文件已保存到git仓库中。</li></ul><p><strong>示例图：</strong></p><p><img src="/images/git-file-lifecycle.png" alt="Git文件状态流程图"></p><h1 id="Git工作区的概念"><a href="#Git工作区的概念" class="headerlink" title="Git工作区的概念"></a>Git工作区的概念</h1><p>  不同的文件状态存储在不同的工作区域内</p><ul><li>本地计算机<ul><li><strong>Working Directory</strong> （工作目录）：正在编辑的文件状态，包含未追踪状态(新建文件)和已修改状态</li><li><strong>Staging Area</strong> （暂存区）：只包含状态为Staged的文件</li><li><strong>Repository</strong>（本地仓库）：Commit提交到本地仓库的文件。</li></ul></li><li>远程计算机<ul><li><strong>Repository</strong>（远程仓库）：已提交到远程仓库的文件</li></ul></li></ul><p><strong>示例图：</strong><br><img src="/images/git-work-directory.png" alt="Git工作区示例图"></p><h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><h2 id="git-init"><a href="#git-init" class="headerlink" title="git init"></a>git init</h2><p>初始化一个空的仓库</p><pre class=" language-shell"><code class="language-shell">PS D:\翻译\git> git initInitialized empty Git repository in D:/翻译/git/.git/</code></pre><h2 id="git-status"><a href="#git-status" class="headerlink" title="git status"></a>git status</h2><p>展示工作区及暂存区域中不同状态的文件</p><pre class=" language-shell"><code class="language-shell">PS D:\翻译\git> git statusOn branch masterNo commits yetnothing to commit (create/copy files and use "git add" to track)</code></pre><p>现在添加一个文件<code>example.js</code></p><pre class=" language-shell"><code class="language-shell">PS D:\翻译\git> echo '' >example.jsPS D:\翻译\git> git statusOn branch masterNo commits yetUntracked files:  (use "git add <file>..." to include in what will be committed)        example.jsnothing added to commit but untracked files present (use "git add" to track)</code></pre><p>Untracked files就是新建的文件</p><h2 id="git-add"><a href="#git-add" class="headerlink" title="git add"></a>git add</h2><p>git add 命令可以将工作目录的文件添加到暂存区，现将上一步新建的<code>example.js</code>加入到暂存区。</p><pre class=" language-shell"><code class="language-shell">PS D:\翻译\git> git add .PS D:\翻译\git> git status On branch masterNo commits yetChanges to be committed:  (use "git rm --cached <file>..." to unstage)         new file:   example.js</code></pre><p>文件<code>example.js</code>已经由工作区移动到暂存区了</p><blockquote><p><code>git rm --cached &lt;file&gt;</code> 可以再将文件的状态改为未追踪</p></blockquote><h2 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit"></a>git commit</h2><p>所有通过 git add 暂存的文件提交到本地仓库</p><pre class=" language-shell"><code class="language-shell">PS D:\翻译\git> git commit -m "提交"[master (root-commit) bc4f9ea] 提交 1 file changed, 0 insertions(+), 0 deletions(-) create mode 100644 example.jsPS D:\翻译\git> git statusOn branch masternothing to commit, working tree clean</code></pre><blockquote><p>git commit 常用参数</p><ul><li>-m 设置提交文字</li><li>-a 将所有已跟踪文件中的执行修改或删除操作的文件都提交到本地仓库，即使它们没有经过git add添加到暂存区</li></ul></blockquote><h2 id="git-restore"><a href="#git-restore" class="headerlink" title="git restore"></a>git restore</h2><p><code>git restore &lt;file&gt;</code><br>表示将在工作空间但是不在暂存区的文件撤销更改（删除修改的内容）</p><blockquote><p><code>git restore --staged &lt;file&gt;</code> 将将文件从暂存区撤出，但不会撤销文件的更改（只改动文件的工作区，不改文件内容）</p></blockquote><h2 id="git-rm"><a href="#git-rm" class="headerlink" title="git rm"></a>git rm</h2><p><code>git rm</code>命令用于从工作区和索引中删除文件<br><code>git rm --cached</code> 只删除索引，不删除工作区文件</p><h2 id="git-reset"><a href="#git-reset" class="headerlink" title="git reset"></a>git reset</h2><p>本地回滚commit 仓库用的</p><ul><li><code>git reset –mixed</code>：此为默认方式，不带任何参数的git reset，即时这种方式，它回退到某个版本，只保留源码，回退commit和index信息</li><li><code>git reset –soft</code>：回退到某个版本，只回退了commit的信息，不会恢复到index file一级。如果还要提交，直接commit即可</li><li><code>git reset –hard commitId</code>：彻底回退到某个版本，本地的源码也会变为上一个版本的内容</li></ul><h2 id="git-revert"><a href="#git-revert" class="headerlink" title="git revert"></a>git revert</h2><p>git revert用于反转提交,执行revert命令时要求工作树必须是干净的.<br>git revert用一个新提交来消除一个历史提交所做的任何修改.<br>revert 之后你的本地代码会回滚到指定的历史版本,这时你再 git push 既可以把线上的代码更新.(这里不会像reset造成冲突的问题)</p><h2 id="git-stash"><a href="#git-stash" class="headerlink" title="git stash"></a>git stash</h2><p>保存当前工作进度，会把暂存区和工作区的改动保存起来。执行完这个命令后，在运行<code>git status</code>命令，就会发现当前是一个干净的工作区，没有任何改动。使用<code>git stash save &#39;message...&#39;</code>可以添加一些注释</p><ul><li><strong><code>git stash list</code>:</strong> 显示保存进度的列表。也就意味着，git stash命令可以多次执行</li><li><strong><code>git stash pop [–index] [stash_id]</code>:</strong><ul><li><code>git stash pop</code> 恢复最新的进度到工作区。git默认会把工作区和暂存区的改动都恢复到工作区。</li><li><code>git stash pop --index</code> 恢复最新的进度到工作区和暂存区。（尝试将原来暂存区的改动还恢复到暂存区）</li><li><code>git stash pop stash@{1}</code>恢复指定的进度到工作区。stash_id是通过git stash list命令得到的<br>通过git stash pop命令恢复进度后，会删除当前进度。</li></ul></li><li><strong><code>git stash apply [–index] [stash_id]</code>:</strong> 除了不删除恢复的进度之外，其余和git stash pop 命令一样。 </li><li><strong><code>git stash drop [stash_id]</code></strong> 删除一个存储的进度。如果不指定stash_id，则默认删除最新的存储进度。</li><li><strong><code>git stash clear</code>:</strong> 删除所有存储的进度</li></ul><h2 id="git-merge"><a href="#git-merge" class="headerlink" title="git merge"></a>git merge</h2><p>合并分支会生成一个特殊的节点<br><img src="/images/git-merge.png" alt="当前分支状态"></p><p>执行<code>git merge bugfix</code>将bugfix 合并过来<br><img src="/images/git-merge-after.png" alt="合并之后状态"></p><p>生成了一个新的节点，在切换到bugfix分支，执行<code>git merge master</code>。<br><img src="/images/git-merge-after-1.png" alt="bugfix合并之后状态"></p><h2 id="git-fetch"><a href="#git-fetch" class="headerlink" title="git fetch"></a>git fetch</h2><p>将本地仓库中的远程分支更新成了远程仓库相应分支最新的状态，并没有更改本地仓库<br><img src="/images/git-fetch.png" alt="fetch更新之前"><br><img src="/images/git-fetch-after.png" alt="fetch更新之后"></p><blockquote><p>左边为本地仓库，右边为远程仓库。本地仓库中o/master指本地远程分支，master指当前操作分支。</p></blockquote><h2 id="git-pull"><a href="#git-pull" class="headerlink" title="git pull"></a>git pull</h2><p>git fetch 和git merge的结合</p><h2 id="git-rebase"><a href="#git-rebase" class="headerlink" title="git rebase"></a>git rebase</h2><p>Rebase 实际上就是取出一系列的提交记录，“复制”它们，然后在另外一个地方逐个的放下去。<br><img src="/images/git-rebase.png" alt="git rebase之前"><br>执行<code>git rebase master</code>,将bugfix分支合并到master<br><img src="/images/git-reabase-after.png" alt="git rebase之后"></p><p>在执行git rebase  bugfix 就可以将master 移动到bugfix节点</p><blockquote><p><a href="https://learngitbranching.js.org/?locale=zh_CN" target="_blank" rel="noopener">Git在线学习网站</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>事件流传递</title>
      <link href="/posts/3795e7e7/"/>
      <url>/posts/3795e7e7/</url>
      
        <content type="html"><![CDATA[<p>这里只说w3c 标准的事件流,w3c 的事件流流程为先捕获后冒泡,向下的箭头为捕获阶段,向上的箭头为冒泡阶段.<br><img src="/images/事件流/w3c.png" width="30%" /></p><h5 id="addEventListener-方法"><a href="#addEventListener-方法" class="headerlink" title="addEventListener 方法"></a>addEventListener 方法</h5><p>该方法的第三个参数是表示该方法在事件的什么阶段去捕获事件.false 是在冒泡阶段,true 是在捕获阶段.在target 元素上捕获阶段和冒泡阶段的调用顺序和事件注册顺序一致.</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>one<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>two<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>three<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    ddddd            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token keyword">var</span> one <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#one'</span><span class="token punctuation">)</span>        <span class="token keyword">var</span> two <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#two'</span><span class="token punctuation">)</span>        <span class="token keyword">var</span> three <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#three'</span><span class="token punctuation">)</span>        one<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'false'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        two<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">,</span><span class="token string">'false'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        three<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">,</span><span class="token string">'false'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>        one<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'true'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        two<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">,</span><span class="token string">'true'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        three<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">,</span><span class="token string">'true'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><p>运行结果为</p><pre class=" language-java"><code class="language-java"><span class="token number">1</span> <span class="token boolean">true</span><span class="token number">2</span> <span class="token boolean">true</span><span class="token number">3</span> <span class="token boolean">false</span><span class="token number">3</span> <span class="token boolean">true</span><span class="token number">2</span> <span class="token boolean">false</span><span class="token number">1</span> <span class="token boolean">false</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js 基础 </tag>
            
            <tag> 事件流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>srcElement vs target vs currentTarget</title>
      <link href="/posts/23e3fb7a/"/>
      <url>/posts/23e3fb7a/</url>
      
        <content type="html"><![CDATA[<h5 id="srcElement"><a href="#srcElement" class="headerlink" title="srcElement"></a>srcElement</h5><p>Event.srcElement 是标准的 Event.target 属性的一个别名。它只对老版本的IE浏览器有效。</p><h5 id="target"><a href="#target" class="headerlink" title="target"></a>target</h5><p>触发事件的对象 (某个DOM元素) 的引用。当事件处理程序在事件的冒泡或捕获阶段被调用时，它与event.currentTarget不同。</p><h5 id="currentTarget"><a href="#currentTarget" class="headerlink" title="currentTarget"></a>currentTarget</h5><p>currentTarget 代表当前事件的元素,冒泡阶段或捕获阶段的元素</p>]]></content>
      
      
      <categories>
          
          <category> 兼容 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 兼容写法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jquery写法扩展</title>
      <link href="/posts/d3c29d72/"/>
      <url>/posts/d3c29d72/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/nefe/You-Dont-Need-jQuery" target="_blank" rel="noopener">原文</a>方便查看复制过来的</p><h2 id="You-Might-Don’t-Need-jQuery"><a href="#You-Might-Don’t-Need-jQuery" class="headerlink" title="You (Might) Don’t Need jQuery"></a>You (Might) Don’t Need jQuery</h2><p>前端发展很快，现代浏览器原生 API 已经足够好用。我们并不需要为了操作 DOM、Event 等再学习一下 jQuery 的 API。同时由于 React、Angular、Vue 等框架的流行，直接操作 DOM 不再是好的模式，jQuery 使用场景大大减少。本项目总结了大部分 jQuery API 替代的方法，暂时只支持 IE10 以上浏览器。</p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ol><li><a href="#translations">Translations</a></li><li><a href="#query-selector">Query Selector</a></li><li><a href="#css--style">CSS &amp; Style</a></li><li><a href="#dom-manipulation">DOM Manipulation</a></li><li><a href="#ajax">Ajax</a></li><li><a href="#events">Events</a></li><li><a href="#utilities">Utilities</a></li><li><a href="#promises">Promises</a></li><li><a href="#animation">Animation</a></li><li><a href="#alternatives">Alternatives</a></li><li><a href="#browser-support">Browser Support</a></li></ol><h2 id="Query-Selector"><a href="#Query-Selector" class="headerlink" title="Query Selector"></a>Query Selector</h2><p>常用的 class、id、属性 选择器都可以使用 <code>document.querySelector</code> 或 <code>document.querySelectorAll</code> 替代。区别是</p><ul><li><code>document.querySelector</code> 返回第一个匹配的 Element</li><li><code>document.querySelectorAll</code> 返回所有匹配的 Element 组成的 NodeList。它可以通过 <code>[].slice.call()</code> 把它转成 Array</li><li>如果匹配不到任何 Element，jQuery 返回空数组 <code>[]</code>，但 <code>document.querySelector</code> 返回 <code>null</code>，注意空指针异常。当找不到时，也可以使用 <code>||</code> 设置默认的值，如 <code>document.querySelectorAll(selector) || []</code></li></ul><blockquote><p>注意：<code>document.querySelector</code> 和 <code>document.querySelectorAll</code> 性能很<strong>差</strong>。如果想提高性能，尽量使用 <code>document.getElementById</code>、<code>document.getElementsByClassName</code> 或 <code>document.getElementsByTagName</code>。</p></blockquote><ul><li><p><a href="#1.0">1.0</a> <a name='1.0'></a> 选择器查询</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// jQuery</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'selector'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Native</span>document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'selector'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p><a href="#1.1">1.1</a> <a name='1.1'></a> class 查询</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// jQuery</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.class'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Native</span>document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'.class'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// or</span>document<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">'class'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p><a href="#1.2">1.2</a> <a name='1.2'></a> id 查询</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// jQuery</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#id'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Native</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#id'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// or</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p><a href="#1.3">1.3</a> <a name='1.3'></a> 属性查询</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// jQuery</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'a[target=_blank]'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Native</span>document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'a[target=_blank]'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p><a href="#1.4">1.4</a> <a name='1.4'></a> 后代查询</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// jQuery</span>$el<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Native</span>el<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p><a href="#1.5">1.5</a> <a name='1.5'></a> 兄弟及上下元素</p><ul><li><p>兄弟元素</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// jQuery</span>$el<span class="token punctuation">.</span><span class="token function">siblings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Native - latest, Edge13+</span><span class="token punctuation">[</span><span class="token operator">...</span>el<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span>children<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>  child <span class="token operator">!==</span> el<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Native (alternative) - latest, Edge13+</span>Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span>el<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span>children<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>  child <span class="token operator">!==</span> el<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Native - IE10+</span>Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>filter<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>el<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span>children<span class="token punctuation">,</span> <span class="token punctuation">(</span>child<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>  child <span class="token operator">!==</span> el<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>上一个元素</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// jQuery</span>$el<span class="token punctuation">.</span><span class="token function">prev</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Native</span>el<span class="token punctuation">.</span>previousElementSibling<span class="token punctuation">;</span></code></pre></li><li><p>下一个元素</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// next</span>$el<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Native</span>el<span class="token punctuation">.</span>nextElementSibling<span class="token punctuation">;</span></code></pre></li></ul></li><li><p><a href="#1.6">1.6</a> <a name='1.6'></a> Closest</p><p>Closest 获得匹配选择器的第一个祖先元素，从当前元素开始沿 DOM 树向上。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// jQuery</span>$el<span class="token punctuation">.</span><span class="token function">closest</span><span class="token punctuation">(</span>queryString<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Native - Only latest, NO IE</span>el<span class="token punctuation">.</span><span class="token function">closest</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Native - IE10+</span><span class="token keyword">function</span> <span class="token function">closest</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> selector<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> matchesSelector <span class="token operator">=</span> el<span class="token punctuation">.</span>matches <span class="token operator">||</span> el<span class="token punctuation">.</span>webkitMatchesSelector <span class="token operator">||</span> el<span class="token punctuation">.</span>mozMatchesSelector <span class="token operator">||</span> el<span class="token punctuation">.</span>msMatchesSelector<span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>matchesSelector<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> selector<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> el<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      el <span class="token operator">=</span> el<span class="token punctuation">.</span>parentElement<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p><a href="#1.7">1.7</a> <a name='1.7'></a> Parents Until</p><p>获取当前每一个匹配元素集的祖先，不包括匹配元素的本身。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// jQuery</span>$el<span class="token punctuation">.</span><span class="token function">parentsUntil</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span> filter<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Native</span><span class="token keyword">function</span> <span class="token function">parentsUntil</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> selector<span class="token punctuation">,</span> filter<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> matchesSelector <span class="token operator">=</span> el<span class="token punctuation">.</span>matches <span class="token operator">||</span> el<span class="token punctuation">.</span>webkitMatchesSelector <span class="token operator">||</span> el<span class="token punctuation">.</span>mozMatchesSelector <span class="token operator">||</span> el<span class="token punctuation">.</span>msMatchesSelector<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// match start from parent</span>  el <span class="token operator">=</span> el<span class="token punctuation">.</span>parentElement<span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>el <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>matchesSelector<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> selector<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>filter<span class="token punctuation">)</span> <span class="token punctuation">{</span>      result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>matchesSelector<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> filter<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    el <span class="token operator">=</span> el<span class="token punctuation">.</span>parentElement<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p><a href="#1.8">1.8</a> <a name='1.8'></a> Form</p><ul><li><p>Input/Textarea</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// jQuery</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#my-input'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Native</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#my-input'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span></code></pre></li><li><p>获取 e.currentTarget 在 <code>.radio</code> 中的数组索引</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// jQuery</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.radio'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>currentTarget<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Native</span>Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>indexOf<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'.radio'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>currentTarget<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul></li><li><p><a href="#1.9">1.9</a> <a name='1.9'></a> Iframe Contents</p><p>jQuery 对象的 iframe <code>contents()</code> 返回的是 iframe 内的 <code>document</code></p><ul><li><p>Iframe contents</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// jQuery</span>$iframe<span class="token punctuation">.</span><span class="token function">contents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Native</span>iframe<span class="token punctuation">.</span>contentDocument<span class="token punctuation">;</span></code></pre></li><li><p>Iframe Query</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// jQuery</span>$iframe<span class="token punctuation">.</span><span class="token function">contents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">'.css'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Native</span>iframe<span class="token punctuation">.</span>contentDocument<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'.css'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul></li><li><p><a href="#1.10">1.10</a> <a name='1.10'></a> 获取 body</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// jQuery</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'body'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Native</span>document<span class="token punctuation">.</span>body<span class="token punctuation">;</span></code></pre></li><li><p><a href="#1.11">1.11</a> <a name='1.11'></a> 获取或设置属性</p><ul><li><p>获取属性</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// jQuery</span>$el<span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Native</span>el<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>设置属性</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// jQuery, note that this works in memory without change the DOM</span>$el<span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token string">'bar'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Native</span>el<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token string">'bar'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>获取 <code>data-</code> 属性</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// jQuery</span>$el<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Native (use `getAttribute`)</span>el<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">'data-foo'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Native (use `dataset` if only need to support IE 11+)</span>el<span class="token punctuation">.</span>dataset<span class="token punctuation">[</span><span class="token string">'foo'</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre></li></ul></li></ul><p><strong><a href="#目录">⬆ 回到顶部</a></strong></p><h2 id="CSS-amp-Style"><a href="#CSS-amp-Style" class="headerlink" title="CSS &amp; Style"></a>CSS &amp; Style</h2><ul><li><p><a href="#2.1">2.1</a> <a name='2.1'></a> CSS</p><ul><li><p>Get style</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// jQuery</span>$el<span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"color"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Native</span><span class="token comment" spellcheck="true">// 注意：此处为了解决当 style 值为 auto 时，返回 auto 的问题</span><span class="token keyword">const</span> win <span class="token operator">=</span> el<span class="token punctuation">.</span>ownerDocument<span class="token punctuation">.</span>defaultView<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// null 的意思是不返回伪类元素</span>win<span class="token punctuation">.</span><span class="token function">getComputedStyle</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">.</span>color<span class="token punctuation">;</span></code></pre></li><li><p>Set style</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// jQuery</span>$el<span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">{</span> color<span class="token punctuation">:</span> <span class="token string">"#ff0011"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Native</span>el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">'#ff0011'</span><span class="token punctuation">;</span></code></pre></li><li><p>Get/Set Styles</p><p>注意，如果想一次设置多个 style，可以参考 oui-dom-utils 中 <a href="https://github.com/oneuijs/oui-dom-utils/blob/master/src/index.js#L194" target="_blank" rel="noopener">setStyles</a> 方法</p></li><li><p>Add class</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// jQuery</span>$el<span class="token punctuation">.</span><span class="token function">addClass</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Native</span>el<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>Remove class</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// jQuery</span>$el<span class="token punctuation">.</span><span class="token function">removeClass</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Native</span>el<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>has class</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// jQuery</span>$el<span class="token punctuation">.</span><span class="token function">hasClass</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Native</span>el<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>Toggle class</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// jQuery</span>$el<span class="token punctuation">.</span><span class="token function">toggleClass</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Native</span>el<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul></li><li><p><a href="#2.2">2.2</a> <a name='2.2'></a> Width &amp; Height</p><p>Width 与 Height 获取方法相同，下面以 Height 为例：</p><ul><li><p>Window height</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// window height</span><span class="token function">$</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 不含 scrollbar，与 jQuery 行为一致</span>window<span class="token punctuation">.</span>document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientHeight<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 含 scrollbar</span>window<span class="token punctuation">.</span>innerHeight<span class="token punctuation">;</span></code></pre></li><li><p>Document height</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// jQuery</span><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Native</span><span class="token keyword">const</span> body <span class="token operator">=</span> document<span class="token punctuation">.</span>body<span class="token punctuation">;</span><span class="token keyword">const</span> html <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">;</span><span class="token keyword">const</span> height <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>  body<span class="token punctuation">.</span>offsetHeight<span class="token punctuation">,</span>  body<span class="token punctuation">.</span>scrollHeight<span class="token punctuation">,</span>  html<span class="token punctuation">.</span>clientHeight<span class="token punctuation">,</span>  html<span class="token punctuation">.</span>offsetHeight<span class="token punctuation">,</span>  html<span class="token punctuation">.</span>scrollHeight<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>Element height</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// jQuery</span>$el<span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Native</span><span class="token keyword">function</span> <span class="token function">getHeight</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> styles <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getComputedStyle</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> height <span class="token operator">=</span> el<span class="token punctuation">.</span>offsetHeight<span class="token punctuation">;</span>  <span class="token keyword">const</span> borderTopWidth <span class="token operator">=</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span>styles<span class="token punctuation">.</span>borderTopWidth<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> borderBottomWidth <span class="token operator">=</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span>styles<span class="token punctuation">.</span>borderBottomWidth<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> paddingTop <span class="token operator">=</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span>styles<span class="token punctuation">.</span>paddingTop<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> paddingBottom <span class="token operator">=</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span>styles<span class="token punctuation">.</span>paddingBottom<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> height <span class="token operator">-</span> borderBottomWidth <span class="token operator">-</span> borderTopWidth <span class="token operator">-</span> paddingTop <span class="token operator">-</span> paddingBottom<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 精确到整数（border-box 时为 height - border 值，content-box 时为 height + padding 值）</span>el<span class="token punctuation">.</span>clientHeight<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 精确到小数（border-box 时为 height 值，content-box 时为 height + padding + border 值）</span>el<span class="token punctuation">.</span><span class="token function">getBoundingClientRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>height<span class="token punctuation">;</span></code></pre></li></ul></li><li><p><a href="#2.3">2.3</a> <a name='2.3'></a> Position &amp; Offset</p><ul><li><p>Position</p><p>获得匹配元素相对父元素的偏移</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// jQuery</span>$el<span class="token punctuation">.</span><span class="token function">position</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Native</span><span class="token punctuation">{</span> left<span class="token punctuation">:</span> el<span class="token punctuation">.</span>offsetLeft<span class="token punctuation">,</span> top<span class="token punctuation">:</span> el<span class="token punctuation">.</span>offsetTop <span class="token punctuation">}</span></code></pre></li><li><p>Offset</p><p>获得匹配元素相对文档的偏移</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// jQuery</span>$el<span class="token punctuation">.</span><span class="token function">offset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Native</span><span class="token keyword">function</span> getOffset <span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> box <span class="token operator">=</span> el<span class="token punctuation">.</span><span class="token function">getBoundingClientRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    top<span class="token punctuation">:</span> box<span class="token punctuation">.</span>top <span class="token operator">+</span> window<span class="token punctuation">.</span>pageYOffset <span class="token operator">-</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientTop<span class="token punctuation">,</span>    left<span class="token punctuation">:</span> box<span class="token punctuation">.</span>left <span class="token operator">+</span> window<span class="token punctuation">.</span>pageXOffset <span class="token operator">-</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientLeft  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul></li><li><p><a href="#2.4">2.4</a> <a name='2.4'></a> Scroll Top</p></li></ul><p>  获取元素滚动条垂直位置。</p><pre class=" language-js"><code class="language-js">  <span class="token comment" spellcheck="true">// jQuery</span>  <span class="token function">$</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">scrollTop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Native</span>  <span class="token punctuation">(</span>document<span class="token punctuation">.</span>documentElement <span class="token operator">&amp;&amp;</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollTop<span class="token punctuation">)</span> <span class="token operator">||</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>scrollTop<span class="token punctuation">;</span></code></pre><p><strong><a href="#目录">⬆ 回到顶部</a></strong></p><h2 id="DOM-Manipulation"><a href="#DOM-Manipulation" class="headerlink" title="DOM Manipulation"></a>DOM Manipulation</h2><ul><li><p><a href="#3.1">3.1</a> <a name='3.1'></a> Remove</p><p>从 DOM 中移除元素。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// jQuery</span>$el<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Native</span>el<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Native - Only latest, NO IE</span>el<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p><a href="#3.2">3.2</a> <a name='3.2'></a> Text</p><ul><li><p>Get text</p><p>返回指定元素及其后代的文本内容。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// jQuery</span>$el<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Native</span>el<span class="token punctuation">.</span>textContent<span class="token punctuation">;</span></code></pre></li><li><p>Set text</p><p>设置元素的文本内容。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// jQuery</span>$el<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Native</span>el<span class="token punctuation">.</span>textContent <span class="token operator">=</span> string<span class="token punctuation">;</span></code></pre></li></ul></li><li><p><a href="#3.3">3.3</a> <a name='3.3'></a> HTML</p><ul><li><p>Get HTML</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// jQuery</span>$el<span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Native</span>el<span class="token punctuation">.</span>innerHTML<span class="token punctuation">;</span></code></pre></li><li><p>Set HTML</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// jQuery</span>$el<span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span>htmlString<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Native</span>el<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> htmlString<span class="token punctuation">;</span></code></pre></li></ul></li><li><p><a href="#3.4">3.4</a> <a name='3.4'></a> Append</p><p>Append 插入到子节点的末尾</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// jQuery</span>$el<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&lt;div id='container'>hello&lt;/div>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Native (HTML string)</span>el<span class="token punctuation">.</span><span class="token function">insertAdjacentHTML</span><span class="token punctuation">(</span><span class="token string">'beforeend'</span><span class="token punctuation">,</span> <span class="token string">'&lt;div id="container">Hello World&lt;/div>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Native (Element)</span>el<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>newEl<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p><a href="#3.5">3.5</a> <a name='3.5'></a> Prepend</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// jQuery</span>$el<span class="token punctuation">.</span><span class="token function">prepend</span><span class="token punctuation">(</span><span class="token string">"&lt;div id='container'>hello&lt;/div>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Native (HTML string)</span>el<span class="token punctuation">.</span><span class="token function">insertAdjacentHTML</span><span class="token punctuation">(</span><span class="token string">'afterbegin'</span><span class="token punctuation">,</span> <span class="token string">'&lt;div id="container">Hello World&lt;/div>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Native (Element)</span>el<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>newEl<span class="token punctuation">,</span> el<span class="token punctuation">.</span>firstChild<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p><a href="#3.6">3.6</a> <a name='3.6'></a> insertBefore</p><p>在选中元素前插入新节点</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// jQuery</span>$newEl<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>queryString<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Native (HTML string)</span>el<span class="token punctuation">.</span><span class="token function">insertAdjacentHTML</span><span class="token punctuation">(</span><span class="token string">'beforebegin '</span><span class="token punctuation">,</span> <span class="token string">'&lt;div id="container">Hello World&lt;/div>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Native (Element)</span><span class="token keyword">const</span> el <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>parentNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>  el<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>newEl<span class="token punctuation">,</span> el<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p><a href="#3.7">3.7</a> <a name='3.7'></a> insertAfter</p><p>在选中元素后插入新节点</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// jQuery</span>$newEl<span class="token punctuation">.</span><span class="token function">insertAfter</span><span class="token punctuation">(</span>queryString<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Native (HTML string)</span>el<span class="token punctuation">.</span><span class="token function">insertAdjacentHTML</span><span class="token punctuation">(</span><span class="token string">'afterend'</span><span class="token punctuation">,</span> <span class="token string">'&lt;div id="container">Hello World&lt;/div>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Native (Element)</span><span class="token keyword">const</span> el <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>parentNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>  el<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>newEl<span class="token punctuation">,</span> el<span class="token punctuation">.</span>nextSibling<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p><a href="#3.8">3.8</a> <a name='3.8'></a> is</p><p>如果匹配给定的选择器，返回true</p><pre class=" language-js"><code class="language-js">  <span class="token comment" spellcheck="true">// jQuery</span>  $el<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Native</span>  el<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p><a href="#3.9">3.9</a> <a name='3.9'></a> clone</p><p>深拷贝被选元素。（生成被选元素的副本，包含子节点、文本和属性。）</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//jQuery</span>$el<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Native</span><span class="token comment" spellcheck="true">//深拷贝添加参数'true'</span>el<span class="token punctuation">.</span><span class="token function">cloneNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p><a href="#3.10">3.10</a> <a name='3.10'></a> empty</p><p>移除所有子节点</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//jQuery</span>$el<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Native</span>el<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span></code></pre></li><li><p><a href="#3.11">3.11</a> <a name='3.11'></a> wrap</p><p>把每个被选元素放置在指定的HTML结构中。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//jQuery</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".inner"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span><span class="token string">'&lt;div class="wrapper">&lt;/div>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Native</span>Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>forEach<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.inner'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> wrapper <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  wrapper<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">'wrapper'</span><span class="token punctuation">;</span>  el<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">,</span> el<span class="token punctuation">)</span><span class="token punctuation">;</span>  el<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span>  wrapper<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p><a href="#3.12">3.12</a> <a name="3.12"></a> unwrap</p><p>移除被选元素的父元素的DOM结构</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// jQuery</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.inner'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Native</span>Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>forEach<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'.inner'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> elParentNode <span class="token operator">=</span> el<span class="token punctuation">.</span>parentNode      <span class="token keyword">if</span><span class="token punctuation">(</span>elParentNode <span class="token operator">!==</span> document<span class="token punctuation">.</span>body<span class="token punctuation">)</span> <span class="token punctuation">{</span>          elParentNode<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> elParentNode<span class="token punctuation">)</span>          elParentNode<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>elParentNode<span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p><a href="#3.13">3.13</a> <a name="3.13"></a> replaceWith</p><p>用指定的元素替换被选的元素</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//jQuery</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.inner'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replaceWith</span><span class="token punctuation">(</span><span class="token string">'&lt;div class="outer">&lt;/div>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Native</span>Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>forEach<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'.inner'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> outer <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  outer<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">"outer"</span><span class="token punctuation">;</span>  el<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>outer<span class="token punctuation">,</span> el<span class="token punctuation">)</span><span class="token punctuation">;</span>  el<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p><a href="#3.14">3.14</a> <a name='3.14'></a> simple parse</p><p>解析 HTML/SVG/XML 字符串</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// jQuery</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`&lt;ol>  &lt;li>a&lt;/li>  &lt;li>b&lt;/li>&lt;/ol>&lt;ol>  &lt;li>c&lt;/li>  &lt;li>d&lt;/li>&lt;/ol>`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Native</span>range <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createRange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>parse <span class="token operator">=</span> range<span class="token punctuation">.</span>createContextualFragment<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>range<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`&lt;ol>  &lt;li>a&lt;/li>  &lt;li>b&lt;/li>&lt;/ol>&lt;ol>  &lt;li>c&lt;/li>  &lt;li>d&lt;/li>&lt;/ol>`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><p><strong><a href="#目录">⬆ 回到顶部</a></strong></p><h2 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h2><p><a href="https://fetch.spec.whatwg.org/" target="_blank" rel="noopener">Fetch API</a> 是用于替换 XMLHttpRequest 处理 ajax 的新标准，Chrome 和 Firefox 均支持，旧浏览器可以使用 polyfills 提供支持。</p><p>IE9+ 请使用 <a href="http://github.com/github/fetch" target="_blank" rel="noopener">github/fetch</a>，IE8+ 请使用 <a href="https://github.com/camsong/fetch-ie8/" target="_blank" rel="noopener">fetch-ie8</a>，JSONP 请使用 <a href="https://github.com/camsong/fetch-jsonp" target="_blank" rel="noopener">fetch-jsonp</a>。</p><ul><li><p><a href="#4.1">4.1</a> <a name='4.1'></a> 从服务器读取数据并替换匹配元素的内容。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// jQuery</span><span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> completeCallback<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// Native</span><span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>data <span class="token operator">=</span><span class="token operator">></span> data<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>data <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> data<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>completeCallback<span class="token punctuation">)</span></code></pre></li></ul><p><strong><a href="#目录">⬆ 回到顶部</a></strong></p><h2 id="Events"><a href="#Events" class="headerlink" title="Events"></a>Events</h2><p>完整地替代命名空间和事件代理，链接到 <a href="https://github.com/oneuijs/oui-dom-events" target="_blank" rel="noopener">https://github.com/oneuijs/oui-dom-events</a></p><ul><li><p><a href="#5.0">5.0</a> <a name='5.0'></a> Document ready by <code>DOMContentLoaded</code></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// jQuery</span><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span>eventHandler<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Native</span><span class="token comment" spellcheck="true">// 检测 DOMContentLoaded 是否已完成</span><span class="token keyword">if</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>readyState <span class="token operator">!==</span> <span class="token string">'loading'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">eventHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'DOMContentLoaded'</span><span class="token punctuation">,</span> eventHandler<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p><a href="#5.1">5.1</a> <a name='5.1'></a> 使用 on 绑定事件</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// jQuery</span>$el<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span>eventName<span class="token punctuation">,</span> eventHandler<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Native</span>el<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>eventName<span class="token punctuation">,</span> eventHandler<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p><a href="#5.2">5.2</a> <a name='5.2'></a> 使用 off 解绑事件</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// jQuery</span>$el<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span>eventName<span class="token punctuation">,</span> eventHandler<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Native</span>el<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span>eventName<span class="token punctuation">,</span> eventHandler<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p><a href="#5.3">5.3</a> <a name='5.3'></a> Trigger</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// jQuery</span><span class="token function">$</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">'custom-event'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>key1<span class="token punctuation">:</span> <span class="token string">'data'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Native</span><span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>CustomEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> event <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CustomEvent</span><span class="token punctuation">(</span><span class="token string">'custom-event'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>detail<span class="token punctuation">:</span> <span class="token punctuation">{</span>key1<span class="token punctuation">:</span> <span class="token string">'data'</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> event <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createEvent</span><span class="token punctuation">(</span><span class="token string">'CustomEvent'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  event<span class="token punctuation">.</span><span class="token function">initCustomEvent</span><span class="token punctuation">(</span><span class="token string">'custom-event'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>key1<span class="token punctuation">:</span> <span class="token string">'data'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>el<span class="token punctuation">.</span><span class="token function">dispatchEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><p><strong><a href="#目录">⬆ 回到顶部</a></strong></p><h2 id="Utilities"><a href="#Utilities" class="headerlink" title="Utilities"></a>Utilities</h2><p>大部分实用工具都能在 native API 中找到. 其他高级功能可以选用专注于该领域的稳定性和性能都更好的库来代替，推荐 <a href="https://lodash.com" target="_blank" rel="noopener">lodash</a>。</p><ul><li><p><a href="#6.1">6.1</a> <a name='6.1'></a> 基本工具</p><ul><li>isArray</li></ul><p>检测参数是不是数组。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// jQuery</span>$<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>range<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Native</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>range<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>isWindow</li></ul><p>检测参数是不是 window。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// jQuery</span>$<span class="token punctuation">.</span><span class="token function">isWindow</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Native</span><span class="token keyword">function</span> <span class="token function">isWindow</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> obj <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> obj <span class="token operator">!==</span> undefined <span class="token operator">&amp;&amp;</span> obj <span class="token operator">===</span> obj<span class="token punctuation">.</span>window<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>inArray</li></ul><p>在数组中搜索指定值并返回索引 (找不到则返回 -1)。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// jQuery</span>$<span class="token punctuation">.</span><span class="token function">inArray</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> array<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Native</span>array<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// ES6-way</span>array<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>isNumeric</li></ul><p>检测传入的参数是不是数字。<br>Use <code>typeof</code> to decide the type or the <code>type</code> example for better accuracy.</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// jQuery</span>$<span class="token punctuation">.</span><span class="token function">isNumeric</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Native</span><span class="token keyword">function</span> <span class="token function">isNumeric</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token operator">!</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token function">parseFloat</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isFinite</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>isFunction</li></ul><p>检测传入的参数是不是 JavaScript 函数对象。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// jQuery</span>$<span class="token punctuation">.</span><span class="token function">isFunction</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Native</span><span class="token keyword">function</span> <span class="token function">isFunction</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> item <span class="token operator">===</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">var</span> type <span class="token operator">=</span> Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> type <span class="token operator">===</span> <span class="token string">'[object Function]'</span> <span class="token operator">||</span> type <span class="token operator">===</span> <span class="token string">'[object GeneratorFunction]'</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>isEmptyObject</li></ul><p>检测对象是否为空 (包括不可枚举属性).</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// jQuery</span>$<span class="token punctuation">.</span><span class="token function">isEmptyObject</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Native</span><span class="token keyword">function</span> <span class="token function">isEmptyObject</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>isPlainObject</li></ul><p>检测是不是扁平对象 (使用 “{}” 或 “new Object” 创建).</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// jQuery</span>$<span class="token punctuation">.</span><span class="token function">isPlainObject</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Native</span><span class="token keyword">function</span> <span class="token function">isPlainObject</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token string">'object'</span> <span class="token operator">||</span> obj<span class="token punctuation">.</span>nodeType <span class="token operator">||</span> obj <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> obj <span class="token operator">!==</span> undefined <span class="token operator">&amp;&amp;</span> obj <span class="token operator">===</span> obj<span class="token punctuation">.</span>window<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span>constructor <span class="token operator">&amp;&amp;</span>      <span class="token operator">!</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>hasOwnProperty<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>constructor<span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> <span class="token string">'isPrototypeOf'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>extend</li></ul><p>合并多个对象的内容到第一个对象。<br>object.assign 是 ES6 API，也可以使用 <a href="https://github.com/ljharb/object.assign" target="_blank" rel="noopener">polyfill</a>。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// jQuery</span>$<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> defaultOpts<span class="token punctuation">,</span> opts<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Native</span>Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> defaultOpts<span class="token punctuation">,</span> opts<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>trim</li></ul><p>移除字符串头尾空白。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// jQuery</span>$<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Native</span>string<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>map</li></ul><p>将数组或对象转化为包含新内容的数组。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// jQuery</span>$<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token punctuation">(</span>value<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Native</span>array<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>each</li></ul><p>轮询函数，可用于平滑的轮询对象和数组。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// jQuery</span>$<span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token punctuation">(</span>index<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Native</span>array<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>grep</li></ul><p>找到数组中符合过滤函数的元素。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// jQuery</span>$<span class="token punctuation">.</span><span class="token function">grep</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token punctuation">(</span>value<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Native</span>array<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>type</li></ul><p>检测对象的 JavaScript [Class] 内部类型。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// jQuery</span>$<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Native</span><span class="token keyword">function</span> <span class="token function">type</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> reTypeOf <span class="token operator">=</span> <span class="token regex">/(?:^\[object\s(.*?)\]$)/</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reTypeOf<span class="token punctuation">,</span> <span class="token string">'$1'</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>merge</li></ul><p>合并第二个数组内容到第一个数组。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// jQuery</span>$<span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span>array1<span class="token punctuation">,</span> array2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Native</span><span class="token comment" spellcheck="true">// 使用 concat，不能去除重复值</span><span class="token keyword">function</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// ES6，同样不能去除重复值</span>array1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>array1<span class="token punctuation">,</span> <span class="token operator">...</span>array2<span class="token punctuation">]</span><span class="token comment" spellcheck="true">// 使用 Set，可以去除重复值</span><span class="token keyword">function</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><ul><li>now</li></ul><p>返回当前时间的数字呈现。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// jQuery</span>$<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Native</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>proxy</li></ul><p>传入函数并返回一个新函数，该函数绑定指定上下文。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// jQuery</span>$<span class="token punctuation">.</span><span class="token function">proxy</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Native</span>fn<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>makeArray</li></ul><p>类数组对象转化为真正的 JavaScript 数组。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// jQuery</span>$<span class="token punctuation">.</span><span class="token function">makeArray</span><span class="token punctuation">(</span>arrayLike<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Native</span>Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>slice<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arrayLike<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// ES6-way</span>Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span>arrayLike<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p><a href="#6.2">6.2</a> <a name='6.2'></a> 包含</p><p>检测 DOM 元素是不是其他 DOM 元素的后代.</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// jQuery</span>$<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> child<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Native</span>el <span class="token operator">!==</span> child <span class="token operator">&amp;&amp;</span> el<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p><a href="#6.3">6.3</a> <a name='6.3'></a> Globaleval</p><p>全局执行 JavaScript 代码。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// jQuery</span>$<span class="token punctuation">.</span><span class="token function">globaleval</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Native</span><span class="token keyword">function</span> <span class="token function">Globaleval</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> script <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'script'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  script<span class="token punctuation">.</span>text <span class="token operator">=</span> code<span class="token punctuation">;</span>  document<span class="token punctuation">.</span>head<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span><span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Use eval, but context of eval is current, context of $.Globaleval is global.</span><span class="token function">eval</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p><a href="#6.4">6.4</a> <a name='6.4'></a> 解析</p><ul><li>parseHTML</li></ul><p>解析字符串为 DOM 节点数组.</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// jQuery</span>$<span class="token punctuation">.</span><span class="token function">parseHTML</span><span class="token punctuation">(</span>htmlString<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Native</span><span class="token keyword">function</span> <span class="token function">parseHTML</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> context <span class="token operator">=</span> document<span class="token punctuation">.</span>implementation<span class="token punctuation">.</span><span class="token function">createHTMLDocument</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Set the base href for the created document so any parsed elements with URLs</span>  <span class="token comment" spellcheck="true">// are based on the document's URL</span>  <span class="token keyword">const</span> base <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'base'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  base<span class="token punctuation">.</span>href <span class="token operator">=</span> document<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href<span class="token punctuation">;</span>  context<span class="token punctuation">.</span>head<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>base<span class="token punctuation">)</span><span class="token punctuation">;</span>  context<span class="token punctuation">.</span>body<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> string<span class="token punctuation">;</span>  <span class="token keyword">return</span> context<span class="token punctuation">.</span>body<span class="token punctuation">.</span>children<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>parseJSON</li></ul><p>传入格式正确的 JSON 字符串并返回 JavaScript 值.</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// jQuery</span>$<span class="token punctuation">.</span><span class="token function">parseJSON</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Native</span>JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><p><strong><a href="#目录">⬆ 回到顶部</a></strong></p><h2 id="Promises"><a href="#Promises" class="headerlink" title="Promises"></a>Promises</h2><p>Promise 代表异步操作的最终结果。jQuery 用它自己的方式处理 promises，原生 JavaScript 遵循 <a href="http://promises-aplus.github.io/promises-spec/" target="_blank" rel="noopener">Promises/A+</a> 标准实现了最小 API 来处理 promises。</p><ul><li><p><a href="#7.1">7.1</a> <a name='7.1'></a> done, fail, always</p><p><code>done</code> 会在 promise 解决时调用，<code>fail</code> 会在 promise 拒绝时调用，<code>always</code> 总会调用。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// jQuery</span>$promise<span class="token punctuation">.</span><span class="token function">done</span><span class="token punctuation">(</span>doneCallback<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span>failCallback<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">always</span><span class="token punctuation">(</span>alwaysCallback<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// Native</span>promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>doneCallback<span class="token punctuation">,</span> failCallback<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>alwaysCallback<span class="token punctuation">,</span> alwaysCallback<span class="token punctuation">)</span></code></pre></li><li><p><a href="#7.2">7.2</a> <a name='7.2'></a> when</p><p><code>when</code> 用于处理多个 promises。当全部 promises 被解决时返回，当任一 promise 被拒绝时拒绝。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// jQuery</span>$<span class="token punctuation">.</span><span class="token function">when</span><span class="token punctuation">(</span>$promise1<span class="token punctuation">,</span> $promise2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">(</span>promise1Result<span class="token punctuation">,</span> promise2Result<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Native</span>Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>$promise1<span class="token punctuation">,</span> $promise2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">[</span>promise1Result<span class="token punctuation">,</span> promise2Result<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p><a href="#7.3">7.3</a> <a name='7.3'></a> Deferred</p><p>Deferred 是创建 promises 的一种方式。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// jQuery</span><span class="token keyword">function</span> <span class="token function">asyncFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> defer <span class="token operator">=</span> <span class="token keyword">new</span> $<span class="token punctuation">.</span><span class="token function">Deferred</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      defer<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'some_value_computed_asynchronously'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      defer<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'failed'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> defer<span class="token punctuation">.</span><span class="token function">promise</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Native</span><span class="token keyword">function</span> <span class="token function">asyncFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'some_value_computed_asynchronously'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'failed'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Deferred way</span><span class="token keyword">function</span> <span class="token function">defer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> deferred <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    deferred<span class="token punctuation">.</span>resolve <span class="token operator">=</span> resolve<span class="token punctuation">;</span>    deferred<span class="token punctuation">.</span>reject <span class="token operator">=</span> reject<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  deferred<span class="token punctuation">.</span>promise <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> promise<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> deferred<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">asyncFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> defer <span class="token operator">=</span> <span class="token function">defer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      defer<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'some_value_computed_asynchronously'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      defer<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'failed'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> defer<span class="token punctuation">.</span><span class="token function">promise</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul><p><strong><a href="#目录">⬆ 回到顶部</a></strong></p><h2 id="Animation"><a href="#Animation" class="headerlink" title="Animation"></a>Animation</h2><ul><li><p><a href="#8.1">8.1</a> <a name='8.1'></a> Show &amp; Hide</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// jQuery</span>$el<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>$el<span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Native</span><span class="token comment" spellcheck="true">// 更多 show 方法的细节详见 https://github.com/oneuijs/oui-dom-utils/blob/master/src/index.js#L363</span>el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">''</span><span class="token operator">|</span><span class="token string">'inline'</span><span class="token operator">|</span><span class="token string">'inline-block'</span><span class="token operator">|</span><span class="token string">'inline-table'</span><span class="token operator">|</span><span class="token string">'block'</span><span class="token punctuation">;</span>el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'none'</span><span class="token punctuation">;</span></code></pre></li><li><p><a href="#8.2">8.2</a> <a name='8.2'></a> Toggle</p><p>显示或隐藏元素。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// jQuery</span>$el<span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Native</span><span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>ownerDocument<span class="token punctuation">.</span>defaultView<span class="token punctuation">.</span><span class="token function">getComputedStyle</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">.</span>display <span class="token operator">===</span> <span class="token string">'none'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">''</span><span class="token operator">|</span><span class="token string">'inline'</span><span class="token operator">|</span><span class="token string">'inline-block'</span><span class="token operator">|</span><span class="token string">'inline-table'</span><span class="token operator">|</span><span class="token string">'block'</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'none'</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p><a href="#8.3">8.3</a> <a name='8.3'></a> FadeIn &amp; FadeOut</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// jQuery</span>$el<span class="token punctuation">.</span><span class="token function">fadeIn</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>$el<span class="token punctuation">.</span><span class="token function">fadeOut</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Native</span>el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>transition <span class="token operator">=</span> <span class="token string">'opacity 3s'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// fadeIn</span>el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>opacity <span class="token operator">=</span> <span class="token string">'1'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// fadeOut</span>el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>opacity <span class="token operator">=</span> <span class="token string">'0'</span><span class="token punctuation">;</span></code></pre></li><li><p><a href="#8.4">8.4</a> <a name='8.4'></a> FadeTo</p><p>调整元素透明度。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// jQuery</span>$el<span class="token punctuation">.</span><span class="token function">fadeTo</span><span class="token punctuation">(</span><span class="token string">'slow'</span><span class="token punctuation">,</span><span class="token number">0.15</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Native</span>el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>transition <span class="token operator">=</span> <span class="token string">'opacity 3s'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 假设 'slow' 等于 3 秒</span>el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>opacity <span class="token operator">=</span> <span class="token string">'0.15'</span><span class="token punctuation">;</span></code></pre></li><li><p><a href="#8.5">8.5</a> <a name='8.5'></a> FadeToggle</p><p>动画调整透明度用来显示或隐藏。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// jQuery</span>$el<span class="token punctuation">.</span><span class="token function">fadeToggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Native</span>el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>transition <span class="token operator">=</span> <span class="token string">'opacity 3s'</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">{</span> opacity <span class="token punctuation">}</span> <span class="token operator">=</span> el<span class="token punctuation">.</span>ownerDocument<span class="token punctuation">.</span>defaultView<span class="token punctuation">.</span><span class="token function">getComputedStyle</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>opacity <span class="token operator">===</span> <span class="token string">'1'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>opacity <span class="token operator">=</span> <span class="token string">'0'</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>opacity <span class="token operator">=</span> <span class="token string">'1'</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p><a href="#8.6">8.6</a> <a name='8.6'></a> SlideUp &amp; SlideDown</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// jQuery</span>$el<span class="token punctuation">.</span><span class="token function">slideUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>$el<span class="token punctuation">.</span><span class="token function">slideDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Native</span><span class="token keyword">const</span> originHeight <span class="token operator">=</span> <span class="token string">'100px'</span><span class="token punctuation">;</span>el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>transition <span class="token operator">=</span> <span class="token string">'height 3s'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// slideUp</span>el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token string">'0px'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// slideDown</span>el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>height <span class="token operator">=</span> originHeight<span class="token punctuation">;</span></code></pre></li><li><p><a href="#8.7">8.7</a> <a name='8.7'></a> SlideToggle</p><p>滑动切换显示或隐藏。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// jQuery</span>$el<span class="token punctuation">.</span><span class="token function">slideToggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Native</span><span class="token keyword">const</span> originHeight <span class="token operator">=</span> <span class="token string">'100px'</span><span class="token punctuation">;</span>el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>transition <span class="token operator">=</span> <span class="token string">'height 3s'</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">{</span> height <span class="token punctuation">}</span> <span class="token operator">=</span> el<span class="token punctuation">.</span>ownerDocument<span class="token punctuation">.</span>defaultView<span class="token punctuation">.</span><span class="token function">getComputedStyle</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span>height<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>height <span class="token operator">=</span> originHeight<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span> el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token string">'0px'</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p><a href="#8.8">8.8</a> <a name='8.8'></a> Animate</p><p>执行一系列 CSS 属性动画。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// jQuery</span>$el<span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">{</span> params <span class="token punctuation">}</span><span class="token punctuation">,</span> speed<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Native</span>el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>transition <span class="token operator">=</span> <span class="token string">'all '</span> <span class="token operator">+</span> speed<span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>  el<span class="token punctuation">.</span>style<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> params<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre></li></ul><p><strong><a href="#目录">⬆ 回到顶部</a></strong></p><h2 id="Alternatives"><a href="#Alternatives" class="headerlink" title="Alternatives"></a>Alternatives</h2><ul><li><a href="http://youmightnotneedjquery.com/" target="_blank" rel="noopener">你可能不需要 jQuery (You Might Not Need jQuery)</a> - 如何使用原生 JavaScript 实现通用事件，元素，ajax 等用法。</li><li><a href="http://github.com/npm-dom" target="_blank" rel="noopener">npm-dom</a> 以及 <a href="http://github.com/webmodules" target="_blank" rel="noopener">webmodules</a> - 在 NPM 上提供独立 DOM 模块的组织</li></ul><h2 id="Browser-Support"><a href="#Browser-Support" class="headerlink" title="Browser Support"></a>Browser Support</h2><table><thead><tr><th><img src="https://raw.github.com/alrra/browser-logos/master/src/chrome/chrome_48x48.png" alt="Chrome"></th><th><img src="https://raw.github.com/alrra/browser-logos/master/src/firefox/firefox_48x48.png" alt="Firefox"></th><th><img src="https://raw.github.com/alrra/browser-logos/master/src/archive/internet-explorer_9-11/internet-explorer_9-11_48x48.png" alt="IE"></th><th><img src="https://raw.github.com/alrra/browser-logos/master/src/opera/opera_48x48.png" alt="Opera"></th><th><img src="https://raw.github.com/alrra/browser-logos/master/src/safari/safari_48x48.png" alt="Safari"></th></tr></thead><tbody><tr><td>Latest ✔</td><td>Latest ✔</td><td>10+ ✔</td><td>Latest ✔</td><td>6.1+ ✔</td></tr></tbody></table><h1 id="License"><a href="#License" class="headerlink" title="License"></a>License</h1><p>MIT</p>]]></content>
      
      
      
        <tags>
            
            <tag> 兼容 </tag>
            
            <tag> js </tag>
            
            <tag> css </tag>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>存储三兄弟cookie,localstorage,sessionStorage</title>
      <link href="/posts/df2992a1/"/>
      <url>/posts/df2992a1/</url>
      
        <content type="html"><![CDATA[<p>三者都是前端常用的存储工具,cookie常用于用户登录状态的保存<br><a href="https://github.com" target="_blank" rel="noopener">GitHub</a></p><hr>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 存储 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Symbol</title>
      <link href="/posts/eb6433cf/"/>
      <url>/posts/eb6433cf/</url>
      
        <content type="html"><![CDATA[<h1 id="Symbol-介绍"><a href="#Symbol-介绍" class="headerlink" title="Symbol 介绍"></a>Symbol 介绍</h1><p>symbol 是一种基本数据类型 （primitive data type）。Symbol()函数会返回symbol类型的值，该类型具有静态属性和静态方法。它的静态属性会暴露几个内建的成员对象；它的静态方法会暴露全局的symbol注册，且类似于内建对象类，但作为构造函数来说它并不完整，因为它不支持语法：”new Symbol()”。</p><h1 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h1><pre><code>var sl=Symbol([description])</code></pre><p><strong>description:</strong> 可选描述,字符串类型,可用于调试但不能访问symbol本身。</p><h1 id="全局Symbol"><a href="#全局Symbol" class="headerlink" title="全局Symbol"></a>全局Symbol</h1><p>使用Symbol() 函数的语法，不会在你的整个代码库中创建一个可用的全局symbol类型。要创建跨文件可用的symbol，甚至跨域（每个都有它自己的全局作用域）,使用 Symbol.for() 方法和  Symbol.keyFor() 方法从全局的symbol注册表设置和取得symbol</p><h1 id="Symbol的特点"><a href="#Symbol的特点" class="headerlink" title="Symbol的特点"></a>Symbol的特点</h1><ul><li>Symbol 是一个基本数据类型<pre><code>var sl=Symbol(&#39;sl&#39;);console.log(sl); //Symbol(sl)console.log(typeof sl);//symbol</code></pre></li><li>Symbol 具有唯一性<pre><code>var a=Symbol(&#39;a&#39;);var b=Symbol(&#39;a&#39;);console.log(a===b) //false</code></pre></li><li>Symbol 不允许使用new 创建<pre><code>Symbol()//TypeError: Symbol is not a constructor</code></pre></li></ul><blockquote><p><em>原始数据类型创建一个显式包装器对象从 ECMAScript 6 开始不再被支持。 然而，现有的原始包装器对象，如 new Boolean、new String以及new Number，因为遗留原因仍可被创建</em></p></blockquote><h1 id="Symbol的注意事项"><a href="#Symbol的注意事项" class="headerlink" title="Symbol的注意事项"></a>Symbol的注意事项</h1><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><ul><li>尝试将一个 symbol 值转换为一个 number 值时，会抛出一个 TypeError 错误  (e.g. +sym or sym | 0).</li><li>使用宽松相等时， Object(sym) == sym returns true.</li><li><code>Symbol(&quot;foo&quot;) + &quot;bar&quot;</code> 将抛出一个 <code>TypeError (can&#39;t convert symbol to string)</code>.</li><li><code>safer String(sym) conversion</code> 的作用会像symbol类型调用 <code>Symbol.prototype.toString()</code> 一样，但是注意 <code>new String(sym)</code> 将抛出异常。 <h2 id="获取对象Symbol属性"><a href="#获取对象Symbol属性" class="headerlink" title="获取对象Symbol属性"></a>获取对象Symbol属性</h2></li><li>可以通过 <code>Object.getOwnPropertySymbols()</code>获取对象所有的Symbol属性,如果没有的化会返回空数组<pre><code>let obj={};console.log(Object.getOwnPropertySymbols(obj)) //[]let key=Symbol(&#39;key&#39;);obj[key]=11console.log(Object.getOwnPropertySymbols(obj)) //[ Symbol(key) ]</code></pre></li><li>Symbol 在<code>for...in</code>，<code>Object.keys()</code>和  <code>Object.getOwnPropertyNames()</code>中不会被迭代<pre><code>let obj={};let key=Symbol(&#39;key&#39;);obj[key]=11console.log(Object.keys(obj))//[]console.log(Object.getOwnPropertyNames(obj)) //[]for(it in obj){  console.log(it); }</code></pre></li><li>JSON.stringify()<br>使用JSON.stringify() 不会序列化Symbol的键;<pre><code>JSON.stringify({[Symbol(&quot;foo&quot;)]: &quot;foo&quot;});                 // &#39;{}&#39;</code></pre></li></ul><h1 id="Symbol内置方法"><a href="#Symbol内置方法" class="headerlink" title="Symbol内置方法"></a>Symbol内置方法</h1><h2 id="Symbol-for"><a href="#Symbol-for" class="headerlink" title="Symbol.for"></a>Symbol.for</h2><p>该方法会根据给定的键 key，来从运行时的 symbol 注册表中找到对应的 symbol，如果找到了，则返回它，否则，新建一个与该键关联的 symbol，并放入全局 symbol 注册表中。详情见<a href="https://www.ecma-international.org/ecma-262/6.0/#sec-symbol.for" target="_blank" rel="noopener">Symbol.for</a>标准。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><pre><code>var sl=Symbol.for(key); </code></pre><p><strong>key :</strong> 一个字符串，作为 symbol 注册表中与某 symbol 关联的键（同时也会作为该 symbol 的描述）。</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><pre><code>Symbol.for(&quot;foo&quot;); // 创建一个 symbol 并放入 symbol 注册表中，键为 &quot;foo&quot;Symbol.for(&quot;foo&quot;); // 从 symbol 注册表中读取键为&quot;foo&quot;的 symbolSymbol.for(&quot;bar&quot;) === Symbol.for(&quot;bar&quot;); // true，证明了上面说的Symbol(&quot;bar&quot;) === Symbol(&quot;bar&quot;); // false，Symbol() 函数每次都会返回新的一个 symbolvar sym = Symbol.for(&quot;mario&quot;);sym.toString(); // &quot;Symbol(mario)&quot;，mario 既是该 symbol 在 symbol 注册表中的键名，又是该 symbol 自身的描述字符串</code></pre><h1 id="Symbol-keyfor"><a href="#Symbol-keyfor" class="headerlink" title="Symbol.keyfor"></a>Symbol.keyfor</h1><p>获取 symbol 注册表中与某个 symbol 关联的键。</p><pre><code>// 创建一个 symbol 并放入 Symbol 注册表，key 为 &quot;foo&quot;var globalSym = Symbol.for(&quot;foo&quot;); Symbol.keyFor(globalSym); // &quot;foo&quot;// 创建一个 symbol，但不放入 symbol 注册表中var localSym = Symbol(); Symbol.keyFor(localSym); // undefined，所以是找不到 key 的// well-known symbol 们并不在 symbol 注册表中Symbol.keyFor(Symbol.iterator) // undefined</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深拷贝和浅拷贝</title>
      <link href="/posts/d8afa4d2/"/>
      <url>/posts/d8afa4d2/</url>
      
        <content type="html"><![CDATA[<h1 id="JS-基本数据类型"><a href="#JS-基本数据类型" class="headerlink" title="JS 基本数据类型"></a>JS 基本数据类型</h1><p>JS的数据类型分为基本数据类型和对象引用数据类型</p><p>基本数据类型</p><ul><li>Boolean</li><li>String</li><li>Number</li><li>Symbol</li><li>undefined</li><li>null</li></ul><p>对象引用数据类型</p><ul><li>Object</li><li>Array</li></ul><p>基本数据类型直接存储在栈(stack)中,引用数据类型存储的是该对象在栈中引用，真实的数据存放在堆内存里.引用数据类型在栈中存储了指针，该指针指向堆中该对象的起始地址。当解释器寻找引用值时，会首先检索其在栈中指针指向的地址，取得地址后从堆中获得实体。<br><img src="/images/堆栈存储图.png" width="50%"  style="margin: 0 auto;"/></p><h1 id="常见的值传递场景"><a href="#常见的值传递场景" class="headerlink" title="常见的值传递场景"></a>常见的值传递场景</h1><h2 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h2><p>赋值操作就是常见的=号.其分为两种基本数据类型和引用数据类型,基本数据类型和引用数据类型赋值的时候都是传递的值.只不过引用数据类型的值是指针</p><pre class=" language-javaScript"><code class="language-javaScript">var num=1;var str='1';var bool=true;var und=undefined;var nul=null;var obj={a:1,c:{d:2}};var arr=[1,23,4];var copy=num;copy=2;console.log(copy,num); // 2,1copy=obj;copy.a=2;copy.c.d=3;console.log(JSON.stringify(copy),JSON.stringify(obj)); //{"a":2,"c":{"d":3}}, {"a":2,"c":{"d":3}}copy=arr;copy[0]='copy';console.log(copy,arr) //[ 'copy', 23, 4 ] [ 'copy', 23, 4 ]</code></pre><p>基本数据类型传的就是栈中存的值本身,所以当修改copy的时候原变量并不会被修改,而当传的是引用使用类型时,赋值时传的就是栈中的指针,这样copy变量在栈中存储的就是这个指针,这样当修改copy值得时候,就会去修改指针所指向实体的值,这样原变量也会被修改.</p><h2 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h2><p>浅拷贝是只复制对象的第一层属性.</p><pre class=" language-JavaScript"><code class="language-JavaScript"> var obj={    b:'b',    c:{        d:'d',        f:{            g:'g'        },        a:['a']    },    h:['h']}console.log(JSON.stringify(obj)); //{"b":"b","c":{"d":"d","f":{"g":"g"},"a":["a"]},"h":["h"]}// 浅拷贝let copy={};for(let i in obj){    copy[i]=obj[i];}console.log(JSON.stringify(copy));// 修改属性copy.b='bb';copy.h[0]='hh';copy.c.d='dd'console.log(JSON.stringify(copy));//{"b":"bb","c":{"d":"dd","f":{"g":"g"},"a":["a"]},"h":["hh"]}console.log(JSON.stringify(obj)); //{"b":"b","c":{"d":"dd","f":{"g":"g"},"a":["a"]},"h":["hh"]}</code></pre><p>浅拷贝可以看到就是将对象的第一层属性循环赋值出去,基本数据类型传值,引用数据类型传值(传址);</p><h2 id="函数传参"><a href="#函数传参" class="headerlink" title="函数传参"></a>函数传参</h2><p>js中的函数传参都属于值传递,地址也是值.</p><pre class=" language-javaScript"><code class="language-javaScript">let c=44;function test (val){    val=55;}test(c);console.log(c) // 44 let c1=[1];function arr(val){    val[0]=2;}arr(c1);console.log(c1) //[ 2 ]let c2={c2:2,c3:{c4:22}}function obj(val){    val.c2=444;    val.c3.c4=444;}obj(c2);console.log(JSON.stringify(c2)) //{"c2":444,"c3":{"c4":444}}</code></pre><p>所以当传的参数是基本数据类型时,相当于执行了<code>形参=实参</code>,所以在修改基本数据类型参数是不会影响外部.修改引用参数时就影响到外部.</p><h2 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h2><p>可以理解为浅拷贝</p><pre class=" language-javaScript"><code class="language-javaScript">let obj={a:'a',b:'b',c:'c',d:{dd:'dd'},arr:[22]};let {a,b,d,arr}=obj;a='c';arr[0]=1;d.dd='cc'console.log(JSON.stringify(obj));//{"a":"a","b":"b","c":"c","d":{"dd":"cc"},"arr":[1]}d={}console.log(JSON.stringify(obj));//{"a":"a","b":"b","c":"c","d":{"dd":"cc"},"arr":[1]}</code></pre><h2 id="展开语法…-不知道叫啥"><a href="#展开语法…-不知道叫啥" class="headerlink" title="展开语法…(不知道叫啥)"></a>展开语法…(不知道叫啥)</h2><p>浅拷贝</p><pre class=" language-JavaScript"><code class="language-JavaScript">var a={d:2,c:3,d1:{dd:'33'}};let tem ={...a};console.log(JSON.stringify(a));//{"d":2,"c":3,"d1":{"dd":"33"}}console.log(JSON.stringify(tem)); //{"d":2,"c":3,"d1":{"dd":"33"}}tem.d=4;tem.d1.dd='44';console.log(JSON.stringify(a));//{"d":2,"c":3,"d1":{"dd":"44"}}console.log(JSON.stringify(tem)); //{"d":4,"c":3,"d1":{"dd":"44"}}</code></pre><h2 id="Object-assign"><a href="#Object-assign" class="headerlink" title="Object.assign"></a>Object.assign</h2><p>浅拷贝</p><h2 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h2><p>递归浅拷贝;对象就复制{},数组就赋值[];</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端Dom操作集合</title>
      <link href="/posts/a89b6fa6/"/>
      <url>/posts/a89b6fa6/</url>
      
        <content type="html"><![CDATA[<h1 id="原生JS中DOM节点相关API合集"><a href="#原生JS中DOM节点相关API合集" class="headerlink" title="原生JS中DOM节点相关API合集"></a>原生JS中DOM节点相关API合集</h1><h2 id="节点属性"><a href="#节点属性" class="headerlink" title="节点属性"></a>节点属性</h2><pre class=" language-JavaScript"><code class="language-JavaScript">Node.nodeName   //返回节点名称，只读Node.nodeType   //返回节点类型的常数值，只读Node.nodeValue  //返回Text或Comment节点的文本值，只读Node.textContent  //返回当前节点和它的所有后代节点的文本内容，可读写Node.baseURI    //返回当前网页的绝对路径Node.ownerDocument  //返回当前节点所在的顶层文档对象，即documentNode.nextSibling  //返回紧跟在当前节点后面的第一个兄弟节点Node.previousSibling  //返回当前节点前面的、距离最近的一个兄弟节点Node.parentNode   //返回当前节点的父节点Node.parentElement  //返回当前节点的父Element节点Node.childNodes   //返回当前节点的所有子节点Node.firstChild  //返回当前节点的第一个子节点Node.lastChild   //返回当前节点的最后一个子节点//parentNode接口Node.children  //返回指定节点的所有Element子节点Node.firstElementChild  //返回当前节点的第一个Element子节点Node.lastElementChild   //返回当前节点的最后一个Element子节点Node.childElementCount  //返回当前节点所有Element子节点的数目。</code></pre><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><pre><code>Node.appendChild(node)   //向节点添加最后一个子节点Node.hasChildNodes()   //返回布尔值，表示当前节点是否有子节点Node.cloneNode(true);  // 默认为false(克隆节点), true(克隆节点及其属性，以及后代)Node.insertBefore(newNode,oldNode)  // 在指定子节点之前插入新的子节点Node.removeChild(node)   //删除节点，在要删除节点的父节点上操作Node.replaceChild(newChild,oldChild)  //替换节点Node.contains(node)  //返回一个布尔值，表示参数节点是否为当前节点的后代节点。Node.compareDocumentPosition(node)   //返回一个7个比特位的二进制值，表示参数节点和当前节点的关系Node.isEqualNode(noe)  //返回布尔值，用于检查两个节点是否相等。所谓相等的节点，指的是两个节点的类型相同、属性相同、子节点相同。Node.normalize()   //用于清理当前节点内部的所有Text节点。它会去除空的文本节点，并且将毗邻的文本节点合并成一个。//ChildNode接口Node.remove()  //用于删除当前节点Node.before()  //Node.after()Node.replaceWith()</code></pre><h1 id="Document节点"><a href="#Document节点" class="headerlink" title="Document节点"></a>Document节点</h1><h2 id="Document节点的属性"><a href="#Document节点的属性" class="headerlink" title="Document节点的属性"></a>Document节点的属性</h2><pre><code>document.doctype   //document.documentElement  //返回当前文档的根节点document.defaultView   //返回document对象所在的window对象document.body   //返回当前文档的&lt;body&gt;节点document.head   //返回当前文档的&lt;head&gt;节点document.activeElement  //返回当前文档中获得焦点的那个元素。//节点集合属性document.links  //返回当前文档的所有a元素document.forms  //返回页面中所有表单元素document.images  //返回页面中所有图片元素document.embeds  //返回网页中所有嵌入对象document.scripts  //返回当前文档的所有脚本document.styleSheets  //返回当前网页的所有样式表//文档信息属性document.documentURI  //表示当前文档的网址document.URL  //返回当前文档的网址document.domain  //返回当前文档的域名document.lastModified  //返回当前文档最后修改的时间戳document.location  //返回location对象，提供当前文档的URL信息document.referrer  //返回当前文档的访问来源document.title    //返回当前文档的标题document.characterSet属性返回渲染当前文档的字符集，比如UTF-8、ISO-8859-1。document.readyState  //返回当前文档的状态document.designMode  //控制当前文档是否可编辑，可读写document.compatMode  //返回浏览器处理文档的模式document.cookie   //用来操作Cookie</code></pre><h2 id="Document节点的方法"><a href="#Document节点的方法" class="headerlink" title="Document节点的方法"></a>Document节点的方法</h2><h3 id="读写方法"><a href="#读写方法" class="headerlink" title="读写方法"></a>读写方法</h3><pre><code>document.open()   //用于新建并打开一个文档document.close()   //不安比open方法所新建的文档document.write()   //用于向当前文档写入内容document.writeIn()  //用于向当前文档写入内容，尾部添加换行符。document.querySelector(selectors)   //接受一个CSS选择器作为参数，返回第一个匹配该选择器的元素节点。document.querySelectorAll(selectors)  //接受一个CSS选择器作为参数，返回所有匹配该选择器的元素节点。document.getElementsByTagName(tagName)  //返回所有指定HTML标签的元素document.getElementsByClassName(className)   //返回包括了所有class名字符合指定条件的元素document.getElementsByName(name)   //用于选择拥有name属性的HTML元素（比如&lt;form&gt;、&lt;radio&gt;、&lt;img&gt;、&lt;frame&gt;、&lt;embed&gt;和&lt;object&gt;等）document.getElementById(id)   //返回匹配指定id属性的元素节点。document.elementFromPoint(x,y)  //返回位于页面指定位置最上层的Element子节点。document.createElement(tagName)   //用来生成HTML元素节点。document.createTextNode(text)   //用来生成文本节点document.createAttribute(name)  //生成一个新的属性对象节点，并返回它。document.createDocumentFragment()  //生成一个DocumentFragment对象document.createEvent(type)   //生成一个事件对象，该对象能被element.dispatchEvent()方法使用document.addEventListener(type,listener,capture)  //注册事件document.removeEventListener(type,listener,capture)  //注销事件document.dispatchEvent(event)  //触发事件document.hasFocus()   //返回一个布尔值，表示当前文档之中是否有元素被激活或获得焦点。document.adoptNode(externalNode)  //将某个节点，从其原来所在的文档移除，插入当前文档，并返回插入后的新节点。document.importNode(externalNode, deep)   //从外部文档拷贝指定节点，插入当前文档。</code></pre><h1 id="Element节点"><a href="#Element节点" class="headerlink" title="Element节点"></a>Element节点</h1><pre><code>特性属性Element.attributes  //返回当前元素节点的所有属性节点Element.id  //返回指定元素的id属性，可读写Element.tagName  //返回指定元素的大写标签名Element.innerHTML   //返回该元素包含的HTML代码，可读写Element.outerHTML  //返回指定元素节点的所有HTML代码，包括它自身和包含的的所有子元素，可读写Element.className  //返回当前元素的class属性，可读写Element.classList  //返回当前元素节点的所有class集合Element.dataset   //返回元素节点中所有的data-*属性。尺寸属性Element.clientHeight   //返回元素节点可见部分的高度Element.clientWidth   //返回元素节点可见部分的宽度Element.clientLeft   //返回元素节点左边框的宽度Element.clientTop   //返回元素节点顶部边框的宽度Element.scrollHeight  //返回元素节点的总高度Element.scrollWidth  //返回元素节点的总宽度Element.scrollLeft   //返回元素节点的水平滚动条向右滚动的像素数值,通过设置这个属性可以改变元素的滚动位置Element.scrollTop   //返回元素节点的垂直滚动向下滚动的像素数值Element.offsetHeight   //返回元素的垂直高度(包含border,padding)Element.offsetWidth    //返回元素的水平宽度(包含border,padding)Element.offsetLeft    //返回当前元素左上角相对于Element.offsetParent节点的垂直偏移Element.offsetTop   //返回水平位移Element.style  //返回元素节点的行内样式节点相关属性Element.children   //包括当前元素节点的所有子元素Element.childElementCount   //返回当前元素节点包含的子HTML元素节点的个数Element.firstElementChild  //返回当前节点的第一个Element子节点  Element.lastElementChild   //返回当前节点的最后一个Element子节点  Element.nextElementSibling  //返回当前元素节点的下一个兄弟HTML元素节点Element.previousElementSibling  //返回当前元素节点的前一个兄弟HTML节点Element.offsetParent   //返回当前元素节点的最靠近的、并且CSS的position属性不等于static的父元素。</code></pre><h1 id="事件方法"><a href="#事件方法" class="headerlink" title="事件方法"></a>事件方法</h1><pre><code>Element.addEventListener()：添加事件的回调函数  Element.removeEventListener()：移除事件监听函数  Element.dispatchEvent()：触发事件//ie8Element.attachEvent(oneventName,listener)Element.detachEvent(oneventName,listener)// event对象  var event = window.event||event;    // 事件的目标节点  var target = event.target || event.srcElement;// 事件代理  ul.addEventListener(&#39;click&#39;, function(event) {     if (event.target.tagName.toLowerCase() === &#39;li&#39;) {       console.log(event.target.innerHTML)     }  });</code></pre>]]></content>
      
      
      <categories>
          
          <category> 基础 </category>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> api </tag>
            
            <tag> dom </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
